This CS-255 course involves the itterative investigation of and development of Systems Engineering Diagrams, which include capturing functional and non-functional requirements from customer inputs that can be written, interview derived, as well as internally driven based on best practices or industry regulations and other sources.  From these requirements, a variety of high level diagrams are developed which include Object Models, Gantt charts, Process models, structural models, and behavioral models.

The course follows a conceptual contract job from a customer "DriverPass" that seeks to create a learning management system (LMS) that is specifically geared towards helping students to pass the DMV drivers exams thru the use of online learning content as well as behind the wheel instruction.

The first project is housed in the Week 5 folder which involves the preliminary creation of a Business Requirement Document to capture the requirements that will drive the systems development work. Also included is a model application short paper which prepares for the use of the Process Model, and Object models later in the course.

The second project is housed in the Week 7 folder, this project involves the conclusion of the requirements document, along with added details on the output diagrams that are derived from the business requirements captured in project 1.  Additionally, these output diagrams are presented to the customer via a short presentation that focusses on presenting the high level implementations, but specially avoiding the unnecessary usage of technical jargon.

Given more time, further enhancements could be added to the work diagrams to further explore the various use models, users requirements, along with business requirements to ensure all requirements and utilizations of the system are considered along with the necessary data workflows that would support them.  Having completed the initial diagrams, these diagrams and the system as a whole would repeat the development itterative cycle to explore for the needs of additional refinements until a concensus of sufficiently completed is reached, where development of the code base could them commence.

While an understanding of these workflows and diagrams is clearly important, I did not find the work particularly interesting, I do not feel this would be a good career (Systems Engineering) track for me to follow.  I think for very small coding projects, the needs for these types of work is less useful (for example a data manipulation script), while for a very large development effort, this work is essential to ensure all developers are working to the same understanding to prevent conflicts in interpretations and also reduce reworking for corrections.  I think most projects an individual contributor works on will be somewhere in the middle and must be assessed on a case by case basis.

Given my desired work in at the driver/hardware implementation boundary, I do not feel these works will typically directly impact my work as the code must merge with the hardware in ways that are rarely subjective, but rather must follow strict behaviors set out by the hardware manufacturer.  Further abstractions would then be more use-case depenendent.
